<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user.UserMapper">

	<!-- 회원가입 -->
	<insert id="signin" parameterType="UserDTO">
		INSERT INTO user(
			name,
			nickname,
			email,
			pw,
			phone,
			logintype)
		values(
			#{name},
			#{nickname},
			#{email},
			#{pw},
			#{phone},
			#{logintype}
		)
	</insert>
	
	<!-- 로그인 -->
	<select id="login" parameterType="loginReq" resultType="UserDTO">
		select*
		from user
		where email=#{email} and pw=#{pw}
	</select>
	
	<!-- 이메일 찾기 -->
	<select id="findId" parameterType="findIdReq" resultType="String">
		select email 
		from user
		where name=#{name} and phone=#{phone}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findPw" parameterType="HashMap" resultType="String">
		select pw 
		from user
		where email=#{email} and phone=#{phone}
	</select>
	
	<!-- 로그인 -->
	<select id="login_kakao" parameterType="String" resultType="UserDTO">
		select*
		from user
		where email=#{email}
	</select>
	
	<!-- 이메일 중복체크 -->
	<select id="checkEmail" parameterType="String" resultType="int">
		select exists 
		(select email from user where email=#{email})
	</select>
	
	<!-- 닉네임 중복체크 -->
	<select id="checkNickname" parameterType="String" resultType="int">
		select exists 
		(select nickname from user where nickname=#{nickname})
	</select>
	
	<!-- 닉네임 중복체크(해당 사용자인 경우) -->
	<select id="checkPrevNickname" parameterType="HashMap" resultType="int">
		select exists 
		(select nickname from user where nickname=#{nickname} and email=#{email})
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="editUser" parameterType="UserDTO">
		update user 
		set 
			nickname=#{nickname}, 
			pw=#{pw}, 
			phone=#{phone}
		where email=#{email}
	</update>
	
	<!-- 로그인 -->
	<select id="getUserInfo" parameterType="String" resultType="UserDTO">
		select*
		from user
		where email=#{email}
	</select>
	
	<delete id="deleteUser" parameterType="String">
		delete from user
		where email=#{email}
	</delete>
	
	<!-- 글쓴 내역 불러오기 -->
	<select id="getDiary" parameterType="String" resultType="UserDiaryDTO">
		select 
			d.id,title, 
			contents, 
			recipes, 
			u.nickname as writer, 
			writing, 
			likecnt, 
			photo, 
			email
		from diary d join user u
		on u.id = d.writer_id
		where email=#{email}
	</select>
	
	<!-- 좋아요 내역 조회 -->
	<select id="getUserLikes" parameterType="int" resultType="int">
		select diary_id 
		from likes 
		where user_id=#{user_id}
	</select>
	
	<!-- 좋아요(diary_id) - 게시글(id) 조회 -->
	<select id="getLikedDiaryInfo" parameterType="int" resultType="DiaryDTO">
		select 
			d.id as id, 
			likecnt, 
			diaryid,  
			title,  
			contents,  
			u.nickname as writer,  
			writing,  
			photo, 
			recipes
		from diary d join user u
		on u.id = d.writer_id
		where d.id=#{id}
	</select>
</mapper>